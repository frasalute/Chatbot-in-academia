import os
import re
import json
import ast
import gradio as gr
from fuzzywuzzy import fuzz
from openai import OpenAI
from DOC_REGISTRY import DOC_REGISTRY
from pptx import Presentation
from pptx.util import Inches, Pt
from pptx.enum.text import PP_PARAGRAPH_ALIGNMENT
import matplotlib.pyplot as plt
from textwrap import wrap

client = OpenAI(api_key="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")

def preprocess_text(text: str) -> str:
    text = text.strip()
    text = re.sub(r"\[\d+\]|\(\w+ et al\., \d+\)", "", text)
    text = re.sub(r"\(see Fig\.\s?\d+\)", "", text)
    text = re.sub(r"[*_#]", "", text)
    text = re.sub(r"-\n", "", text)
    return " ".join(text.split())

def read_txt_full_text(file_path: str) -> str:
    with open(file_path, "r", encoding="utf-8") as f:
        raw_text = f.read()
    return preprocess_text(raw_text)

def detect_target_doc(query: str, registry: dict, threshold=80):
    query_lower = query.lower()
    best_doc = None
    best_score = 0
    for doc_name, data in registry.items():
        for alias in data["aliases"]:
            score = fuzz.partial_ratio(query_lower, alias.lower())
            if score > best_score:
                best_score = score
                best_doc = doc_name
    return best_doc if best_score >= threshold else None

def gpt_response(system_content, user_prompt, max_tokens=1000):
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[
            {"role": "system", "content": system_content},
            {"role": "user", "content": user_prompt}
        ],
        temperature=0.7,
        max_tokens=max_tokens
    )
    return response.choices[0].message.content

def parse_python_list(raw_output: str) -> list:
    try:
        bracketed = raw_output[raw_output.find("["):raw_output.rfind("]")+1]
        data = ast.literal_eval(bracketed)
        if isinstance(data, list):
            return data
    except Exception:
        pass
    return []

def parse_visual_description(raw_visual):
    chart_types = ["bar chart", "pie chart", "line chart", "histogram", "scatter plot", "flowchart", "venn diagram"]
    raw = raw_visual.lower()
    for ctype in chart_types:
        if ctype in raw:
            return ctype.title(), raw.strip().capitalize()
    return None, None

def generate_slide_deck(full_text: str):
    titles_prompt = f"""
You are an academic presentation assistant. Generate EXACTLY 5 concise slide titles as a Python list based on the following academic content:
Return only the list, no explanation.

Content:
{full_text[:3000]}
"""
    raw_titles = gpt_response("You generate slide titles only.", titles_prompt, 300)
    titles = parse_python_list(raw_titles)
    if len(titles) < 5:
        titles = [f"Slide {i+1}" for i in range(5)]

    slides = []
    for title in titles:
        bullets_prompt = f"""
You are an academic assistant. Generate EXACTLY 3 bullet points as a Python list for the slide titled '{title}' using the content below:
Return only the list.

Content:
{full_text[:3000]}
"""
        raw_bullets = gpt_response("You write 3 bullet points only.", bullets_prompt, 300)
        bullets = parse_python_list(raw_bullets)
        if len(bullets) < 3:
            bullets = ["Point 1", "Point 2", "Point 3"]

        visual_prompt = f"""
Given the title '{title}' and these bullet points:
{bullets}
Suggest ONE appropriate chart to visualize the content. Choose from: 
["Bar chart", "Pie chart", "Line chart", "Histogram", "Scatter plot", "Flowchart", "Venn diagram", "None"]

Return ONLY the chart type and a short description, like: "Bar chart comparing user types".
"""
        raw_visual = gpt_response("Suggest a single chart idea for a slide.", visual_prompt, 100).strip()
        chart_type, visual_idea = parse_visual_description(raw_visual)

        slides.append({
            "title": title,
            "bullet_points": bullets,
            "visual": visual_idea if visual_idea and chart_type else None,
            "chart_type": chart_type
        })
    return slides

def generate_visual_slide(description: str, img_path="chart.png"):
    labels = ["A", "B", "C", "D"]
    values = [0.4, 0.7, 0.5, 0.6]
    plt.figure(figsize=(10, 5))
    plt.bar(labels, values, color="mediumpurple")
    plt.xlabel("CEM Dimensions")
    plt.ylabel("Impact Score")
    plt.tight_layout()
    plt.savefig(img_path, dpi=300)
    plt.close()
    return img_path

def build_pptx(slides, output_path="presentation.pptx"):
    prs = Presentation()
    title_slide_layout = prs.slide_layouts[0]
    bullet_slide_layout = prs.slide_layouts[1]
    blank_layout = prs.slide_layouts[6]

    slide = prs.slides.add_slide(title_slide_layout)
    slide.shapes.title.text = "Academic Slide Deck"
    slide.placeholders[1].text = "Generated by CBS Bot"

    for i, item in enumerate(slides):
        slide = prs.slides.add_slide(bullet_slide_layout)
        title_shape = slide.shapes.title
        title_shape.text = item["title"]

        content = slide.shapes.placeholders[1]
        tf = content.text_frame
        tf.clear()
        tf.word_wrap = True
        for point in item["bullet_points"]:
            p = tf.add_paragraph()
            p.text = point
            p.level = 0
            p.font.size = Pt(16)
            p.alignment = PP_PARAGRAPH_ALIGNMENT.LEFT

        if item.get("visual"):
            image_path = generate_visual_slide(item["visual"], f"chart_{i}.png")
            visual_slide = prs.slides.add_slide(blank_layout)

            title_box = visual_slide.shapes.add_textbox(Inches(0.5), Inches(0.3), Inches(9), Inches(1.0))
            title_frame = title_box.text_frame
            title_frame.word_wrap = True
            title_frame.clear()

            wrapped_title = wrap(item["visual"].strip().capitalize(), width=55)
            if wrapped_title:
                title_para = title_frame.paragraphs[0]
                title_para.text = wrapped_title[0]
                title_para.font.size = Pt(20)
                title_para.alignment = PP_PARAGRAPH_ALIGNMENT.CENTER
                for line in wrapped_title[1:]:
                    p = title_frame.add_paragraph()
                    p.text = line
                    p.font.size = Pt(14)
                    p.alignment = PP_PARAGRAPH_ALIGNMENT.CENTER

            visual_slide.shapes.add_picture(image_path, Inches(1.0), Inches(1.5), width=Inches(8.5))

            explanation_box = visual_slide.shapes.add_textbox(Inches(0.5), Inches(6.5), Inches(9), Inches(1))
            explanation_tf = explanation_box.text_frame
            explanation_tf.text = f"This {item['chart_type'].lower()} illustrates key points from the slide titled '{item['title']}'"
            explanation_tf.paragraphs[0].font.size = Pt(14)
            explanation_tf.paragraphs[0].alignment = PP_PARAGRAPH_ALIGNMENT.CENTER

    prs.save(output_path)
    return output_path

def handle_user_query(message, chat_history):
    matched_doc = detect_target_doc(message, DOC_REGISTRY)
    if not matched_doc:
        try:
            fallback_response = gpt_response(
                "You are a friendly assistant who only helps users generate slide decks for academic papers they name.",
                f"I couldn't find the paper '{message}'. Can you try a different title, or rephrase it?",
                200
            )
            return fallback_response
        except Exception as e:
            return f"⚠️ Error while handling unknown input: {e}"

    try:
        file_path = f"./papers-cleaned/{matched_doc}.txt"
        full_text = read_txt_full_text(file_path)
        slides = generate_slide_deck(full_text)
        pptx_path = build_pptx(slides)
        return gr.File(pptx_path, label="📥 Download your slides")

    except Exception as e:
        return f"⚠️ Error: {e}"

chatbot = gr.ChatInterface(
    fn=handle_user_query,
    title="📚 CBS Slide Generator",
    theme="default",
    chatbot=gr.Chatbot(show_copy_button=True, type="messages")
)

chatbot.launch()